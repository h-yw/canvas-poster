{"version":3,"file":"create-poster.es.js","sources":["../lib/index.ts"],"sourcesContent":["/**\r\n * @name CanvasPoster\r\n * @desc canvas poster，easy to create poster and export picture\r\n * @desc 创建canvas海报,便于快速生成海报并导出图片\r\n * @author Mr.Hou\r\n * @time 2021/11/18\r\n */\r\nimport { DrawProps, PosterConfig, TargetType } from \"./type\";\r\nclass CanvasPoster {\r\n  private _canvas: HTMLCanvasElement;\r\n  private _ctx: CanvasRenderingContext2D;\r\n  private _config: PosterConfig;\r\n  public _ratio: number = 1;\r\n  private _eventTarget: TargetType;\r\n  constructor(canvas: HTMLCanvasElement, config?: PosterConfig) {\r\n    this._canvas = canvas;\r\n    this._config = config;\r\n    this._ctx = this._canvas.getContext(\"2d\", { alpha: false });\r\n    this._ratio = config.ratio\r\n    this._eventTarget = Object.create({});\r\n    config.onClick && this._listener(config.onClick)\r\n    config.target && this._addTargets(config.target)\r\n    // 设置canvas\r\n    this._setCanvas();\r\n  }\r\n  /**\r\n   * @description 设置canvas参数\r\n   * @return\r\n   */\r\n  private _setCanvas(): void {\r\n    let devicePixelRatio = window.devicePixelRatio || 1;\r\n    if (this._config) {\r\n      this._canvas.width = Math.floor(this._config.width * devicePixelRatio);\r\n      this._canvas.height = Math.floor(this._config.height * devicePixelRatio * this._ratio);\r\n      this._ctx.scale(devicePixelRatio, devicePixelRatio);\r\n    }\r\n    this._ctx.font = \"24px sans-serif\";\r\n    this._ctx.fillStyle = \"#000\";\r\n    this._ctx.textAlign = \"center\";\r\n    this._ctx.textBaseline = \"middle\";\r\n  }\r\n\r\n  /**\r\n   * @description 将自定义目标位置加入目标列表\r\n   * @param {Array[TargetType]} targets\r\n   * @returns\r\n   */\r\n  private _addTargets(targets: any) {\r\n    if (!targets || Object.keys(targets).length <= 0) return\r\n    for (let i in targets) {\r\n      let target = {\r\n        x: targets[i].x * this._ratio,\r\n        y: targets[i].y * this._ratio,\r\n        width: targets[i].width * this._ratio, // 宽度宽度\r\n        height: targets[i].height * this._ratio, // 目标区域高\r\n        left: (targets[i].x + targets[i].width) * this._ratio, // 右边距上距离\r\n        top: (targets[i].y + targets[i].height) * this._ratio, // 底部距上距离\r\n      };\r\n      this._eventTarget[i] = target;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description 判断点击位置是否在目标区域内\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @returns {boolean, string} boolean: 点击在目标区域内，string: 点击的目标名称\r\n   */\r\n  private _isInTargets(x: number, y: number) {\r\n    let isIn = false;\r\n    let t = null;\r\n    for (let i in this._eventTarget) {\r\n      let target = this._eventTarget[i];\r\n      if (x >= target.x && x <= target.left && y >= target.y && y <= target.top) {\r\n        isIn = true;\r\n        t = i;\r\n        break;\r\n      }\r\n    }\r\n    return { isIn, t };\r\n  }\r\n\r\n  /**\r\n   * @description 监听点击事件\r\n   * @param {Function} callback\r\n   * @returns\r\n   */\r\n  private _listener(callback: Function) {\r\n    this._canvas.addEventListener(\"click\", (event) => {\r\n      let $target = this._isInTargets(event.offsetX, event.offsetY);\r\n      let position = {\r\n        x: event.offsetX,\r\n        y: event.offsetY\r\n      }\r\n      event['$position'] = position;\r\n      event['$target'] = $target;\r\n      callback(event);\r\n    });\r\n  }\r\n  /**\r\n   * @description 绘制\r\n   * @param {Array[ImageConfig|TextConfig]} data\r\n   * @returns\r\n   */\r\n  public async draw(data: Array<DrawProps>) {\r\n    let len = data.length;\r\n    for (let i = 0; i < len; i++) {\r\n      // this.addEvent(data[i].events);\r\n      if (data[i].type === \"text\") {\r\n        this.drawText(data[i]);\r\n        continue\r\n      }\r\n      if (data[i].type === \"image\") {\r\n        if (data[i].source instanceof Image) {\r\n          this.drawImage(data[i]);\r\n          continue;\r\n        }\r\n        if (typeof data[i].type === \"string\") {\r\n          let img = await this.createImage(data[i].source as string);\r\n          // console.log(img);\r\n          data[i].source = img as HTMLImageElement;\r\n          this.drawImage(data[i]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * @description 绘制文字\r\n   * @param {TextConfig} params\r\n   * @returns\r\n   */\r\n  public async drawText(params: DrawProps): Promise<number> {\r\n    return new Promise((resolve) => {\r\n      if (params.font) {\r\n        this._ctx.font = params.font;\r\n      }\r\n      if (params.color) {\r\n        this._ctx.fillStyle = params.color;\r\n      }\r\n      if (params.textAlign) {\r\n        console.log(params.textAlign);\r\n\r\n        this._ctx.textAlign = params.textAlign;\r\n      }\r\n      if (!params.maxWidth) {\r\n        this._ctx.fillText(params.source as string, params.x, params.y);\r\n        return;\r\n      }\r\n      let MAX_WIDTH = (params.maxWidth || 200);\r\n      let totalLine = params.totalLine || 1;\r\n      let lineHeight = params.lineHeight || 24;\r\n      let startX = (params.x || 0) ;\r\n      let startY = (params.y || 0) ;\r\n      let allAtr = (params.source as string).split(\"\");\r\n      let rowArr = []; // 拆分出来的每一行\r\n      let rowStrArr = []; // 每一行的文字数组\r\n      for (let i = 0; i < allAtr.length; i++) {\r\n        const currentStr = allAtr[i];\r\n        rowStrArr.push(currentStr);\r\n        const rowStr = rowStrArr.join(\"\");\r\n        if (this._ctx.measureText(rowStr).width > MAX_WIDTH) {\r\n          rowStrArr.pop(); // 删除最后一个\r\n          rowArr.push(rowStrArr.join(\"\")); // 完成一行\r\n          rowStrArr = [currentStr];\r\n          continue;\r\n        }\r\n        // 最后一个字母 直接添加到一行\r\n        if (i === allAtr.length - 1) {\r\n          rowArr.push(rowStr); // 完成一行\r\n        }\r\n      }\r\n      let line = rowArr.length > totalLine ? totalLine : rowArr.length;\r\n      for (let i = 0; i < line; i++) {\r\n        // console.log(rowArr[i], i, line);\r\n        if (i + 1 === line && line !== 1) {\r\n          rowArr[i] = rowArr[i] + \"...\";\r\n        }\r\n        this._ctx.fillText(rowArr[i], startX, startY + i * lineHeight);\r\n      }\r\n      resolve(rowArr.length);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @description 绘制图片\r\n   * @param {ImageConfig} params\r\n   * @returns\r\n   */\r\n  public async drawImage(params: DrawProps): Promise<void> {\r\n    return new Promise(() => {\r\n      if (params.borderRadius !== undefined) {\r\n        this.creatBorderRect(\r\n          Math.floor(params.x * this._ratio),\r\n          Math.floor(params.y * this._ratio),\r\n          Math.floor((params.source as HTMLImageElement).width * this._ratio),\r\n          Math.floor((params.source as HTMLImageElement).height * this._ratio),\r\n          Math.floor(params.borderRadius * this._ratio),\r\n        );\r\n        // this.restore()\r\n      }\r\n      // console.log('drawImage: params', params);\r\n\r\n      if (\r\n        params.dx == undefined ||\r\n        params.dy == undefined ||\r\n        params.dWidth == undefined ||\r\n        params.dHeight == undefined\r\n      ) {\r\n        // console.log(params);\r\n\r\n        this._ctx.drawImage(\r\n          params.source as HTMLImageElement,\r\n          Math.floor(params.x * this._ratio),\r\n          Math.floor(params.y * this._ratio),\r\n          Math.floor((params.source as HTMLImageElement).width * this._ratio),\r\n          Math.floor((params.source as HTMLImageElement).height * this._ratio),\r\n        );\r\n      } else {\r\n        this._ctx.drawImage(\r\n          params.source as HTMLImageElement,\r\n          params.dx * this._ratio,\r\n          params.dy * this._ratio,\r\n          params.dWidth * this._ratio,\r\n          params.dHeight * this._ratio,\r\n          params.x * this._ratio,\r\n          params.y * this._ratio,\r\n          (params.source as HTMLImageElement).width * this._ratio,\r\n          (params.source as HTMLImageElement).height * this._ratio,\r\n        );\r\n      }\r\n      this.restore();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @description 创建图片\r\n   * @param {string} url\r\n   * @returns {Promise<HTMLImageElement|unknown>}\r\n   */\r\n  public createImage(src: string): Promise<HTMLImageElement | unknown> {\r\n    console.log(src);\r\n    if (!Image) {\r\n      console.log(\"不支持new Image(),传入CanvasImageSource\");\r\n      return;\r\n    }\r\n    let img = new Image();\r\n    img.src = src;\r\n    img.referrerPolicy = \"no-referrer\";\r\n    let imgPo = new Promise((resolve, reject) => {\r\n      img.onload = function () {\r\n        resolve(img);\r\n      };\r\n      img.onerror = function (e) {\r\n        reject(e);\r\n      };\r\n    });\r\n    return imgPo;\r\n  }\r\n\r\n  /**\r\n   * @description 创建圆角矩形\r\n   * @param {number} x x坐标\r\n   * @param {number} y y坐标\r\n   * @param {number} width 宽度\r\n   * @param {number} height 高度\r\n   * @param {number} radius 圆角半径\r\n   * @returns\r\n   */\r\n  public creatBorderRect(\r\n    x: number,\r\n    y: number,\r\n    w: any,\r\n    h: any,\r\n    r: number,\r\n    color?: string | CanvasGradient | CanvasPattern,\r\n  ) {\r\n    [x, y, w, h, r] = [x * this._ratio, y * this._ratio, w * this._ratio, h * this._ratio, r * this._ratio];\r\n    this._ctx.beginPath();\r\n    // 左上角\r\n    this._ctx.arc(x + r, y + r, r, Math.PI, 1.5 * Math.PI);\r\n    this._ctx.moveTo(x + r, y);\r\n    this._ctx.lineTo(x + w - r, y);\r\n    this._ctx.lineTo(x + w, y + r);\r\n    // 右上角\r\n    this._ctx.arc(x + w - r, y + r, r, 1.5 * Math.PI, 2 * Math.PI);\r\n    this._ctx.lineTo(x + w, y + h - r);\r\n    this._ctx.lineTo(x + w - r, y + h);\r\n    // 右下角\r\n    this._ctx.arc(x + w - r, y + h - r, r, 0, 0.5 * Math.PI);\r\n    this._ctx.lineTo(x + r, y + h);\r\n    this._ctx.lineTo(x, y + h - r);\r\n    // 左下角\r\n    this._ctx.arc(x + r, y + h - r, r, 0.5 * Math.PI, Math.PI);\r\n    this._ctx.lineTo(x, y + r);\r\n    this._ctx.lineTo(x + r, y);\r\n\r\n    this._ctx.fillStyle = color || \"#5a5a5a\";\r\n    this._ctx.fill();\r\n    this._ctx.closePath();\r\n    this._ctx.save();\r\n    this._ctx.clip();\r\n  }\r\n\r\n  /**\r\n   * @description 恢复clip区域限制\r\n   * @returns\r\n   */\r\n  public restore() {\r\n    this._ctx.restore();\r\n  }\r\n  /**\r\n   *\r\n   * @param type 图片类型\r\n   * @param quality 图片质量(0-1)\r\n   * @returns String\r\n   */\r\n  public canvas2Image() {\r\n    let canvasImg = this._canvas.toDataURL(\"image/png\", 1);\r\n    return canvasImg;\r\n  }\r\n\r\n  /**\r\n   * @description 获取canvas\r\n   * @returns {HTMLCanvasElement}\r\n   */\r\n  public getCanvas(): HTMLCanvasElement {\r\n    return this._canvas;\r\n  }\r\n  /**\r\n   * @description 获取canvas的上下文\r\n   * @returns {RenderingContext}\r\n   */\r\n  public getCtx(): RenderingContext {\r\n    return this._ctx;\r\n  }\r\n\r\n  /* public setRatio(resW: number, deviceW: number) {\r\n    this._ratio = deviceW / resW;\r\n  } */\r\n}\r\nexport default CanvasPoster;\r\n"],"names":[],"mappings":"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"}