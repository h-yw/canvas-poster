{"version":3,"file":"create-poster.umd.js","sources":["../lib/index.ts"],"sourcesContent":["/**\r\n * @name CanvasPoster\r\n * @desc canvas poster，easy to create poster and export picture\r\n * @desc 创建canvas海报,便于快速生成海报并导出图片\r\n * @author Mr.Hou\r\n * @time 2021/11/18\r\n */\r\nimport { DrawProps, PosterConfig, TargetType } from \"./type\";\r\nclass CanvasPoster {\r\n  private _canvas: HTMLCanvasElement;\r\n  private _ctx: CanvasRenderingContext2D;\r\n  private _config: PosterConfig;\r\n  public _ratio: number = 1;\r\n  private _eventTarget: TargetType;\r\n  constructor(canvas: HTMLCanvasElement, config?: PosterConfig) {\r\n    this._canvas = canvas;\r\n    this._config = config;\r\n    this._ctx = this._canvas.getContext(\"2d\", { alpha: false });\r\n    this._ratio = config.ratio\r\n    this._eventTarget = Object.create({});\r\n    config.onClick && this._listener(config.onClick)\r\n    config.target && this._addTargets(config.target)\r\n    // 设置canvas\r\n    this._setCanvas();\r\n  }\r\n  /**\r\n   * @description 设置canvas参数\r\n   * @return\r\n   */\r\n  private _setCanvas(): void {\r\n    let devicePixelRatio = window.devicePixelRatio || 1;\r\n    if (this._config) {\r\n      this._canvas.width = Math.floor(this._config.width * devicePixelRatio);\r\n      this._canvas.height = Math.floor(this._config.height * devicePixelRatio * this._ratio);\r\n      this._ctx.scale(devicePixelRatio, devicePixelRatio);\r\n    }\r\n    this._ctx.font = \"24px sans-serif\";\r\n    this._ctx.fillStyle = \"#000\";\r\n    this._ctx.textAlign = \"center\";\r\n    this._ctx.textBaseline = \"middle\";\r\n  }\r\n\r\n  /**\r\n   * @description 将自定义目标位置加入目标列表\r\n   * @param {Array[TargetType]} targets\r\n   * @returns\r\n   */\r\n  private _addTargets(targets: any) {\r\n    if (!targets || Object.keys(targets).length <= 0) return\r\n    for (let i in targets) {\r\n      let target = {\r\n        x: targets[i].x * this._ratio,\r\n        y: targets[i].y * this._ratio,\r\n        width: targets[i].width * this._ratio, // 宽度宽度\r\n        height: targets[i].height * this._ratio, // 目标区域高\r\n        left: (targets[i].x + targets[i].width) * this._ratio, // 右边距上距离\r\n        top: (targets[i].y + targets[i].height) * this._ratio, // 底部距上距离\r\n      };\r\n      this._eventTarget[i] = target;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description 判断点击位置是否在目标区域内\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @returns {boolean, string} boolean: 点击在目标区域内，string: 点击的目标名称\r\n   */\r\n  private _isInTargets(x: number, y: number) {\r\n    let isIn = false;\r\n    let t = null;\r\n    for (let i in this._eventTarget) {\r\n      let target = this._eventTarget[i];\r\n      if (x >= target.x && x <= target.left && y >= target.y && y <= target.top) {\r\n        isIn = true;\r\n        t = i;\r\n        break;\r\n      }\r\n    }\r\n    return { isIn, t };\r\n  }\r\n\r\n  /**\r\n   * @description 监听点击事件\r\n   * @param {Function} callback\r\n   * @returns\r\n   */\r\n  private _listener(callback: Function) {\r\n    this._canvas.addEventListener(\"click\", (event) => {\r\n      let $target = this._isInTargets(event.offsetX, event.offsetY);\r\n      let position = {\r\n        x: event.offsetX,\r\n        y: event.offsetY\r\n      }\r\n      event['$position'] = position;\r\n      event['$target'] = $target;\r\n      callback(event);\r\n    });\r\n  }\r\n  /**\r\n   * @description 绘制\r\n   * @param {Array[ImageConfig|TextConfig]} data\r\n   * @returns\r\n   */\r\n  public async draw(data: Array<DrawProps>) {\r\n    let len = data.length;\r\n    for (let i = 0; i < len; i++) {\r\n      // this.addEvent(data[i].events);\r\n      if (data[i].type === \"text\") {\r\n        this.drawText(data[i]);\r\n        continue\r\n      }\r\n      if (data[i].type === \"image\") {\r\n        if (data[i].source instanceof Image) {\r\n          this.drawImage(data[i]);\r\n          continue;\r\n        }\r\n        if (typeof data[i].type === \"string\") {\r\n          let img = await this.createImage(data[i].source as string);\r\n          // console.log(img);\r\n          data[i].source = img as HTMLImageElement;\r\n          this.drawImage(data[i]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * @description 绘制文字\r\n   * @param {TextConfig} params\r\n   * @returns\r\n   */\r\n  public async drawText(params: DrawProps): Promise<number> {\r\n    return new Promise((resolve) => {\r\n      if (params.font) {\r\n        this._ctx.font = params.font;\r\n      }\r\n      if (params.color) {\r\n        this._ctx.fillStyle = params.color;\r\n      }\r\n      if (params.textAlign) {\r\n        console.log(params.textAlign);\r\n\r\n        this._ctx.textAlign = params.textAlign;\r\n      }\r\n      if (!params.maxWidth) {\r\n        this._ctx.fillText(params.source as string, params.x, params.y);\r\n        return;\r\n      }\r\n      let MAX_WIDTH = (params.maxWidth || 200);\r\n      let totalLine = params.totalLine || 1;\r\n      let lineHeight = params.lineHeight || 24;\r\n      let startX = (params.x || 0) ;\r\n      let startY = (params.y || 0) ;\r\n      let allAtr = (params.source as string).split(\"\");\r\n      let rowArr = []; // 拆分出来的每一行\r\n      let rowStrArr = []; // 每一行的文字数组\r\n      for (let i = 0; i < allAtr.length; i++) {\r\n        const currentStr = allAtr[i];\r\n        rowStrArr.push(currentStr);\r\n        const rowStr = rowStrArr.join(\"\");\r\n        if (this._ctx.measureText(rowStr).width > MAX_WIDTH) {\r\n          rowStrArr.pop(); // 删除最后一个\r\n          rowArr.push(rowStrArr.join(\"\")); // 完成一行\r\n          rowStrArr = [currentStr];\r\n          continue;\r\n        }\r\n        // 最后一个字母 直接添加到一行\r\n        if (i === allAtr.length - 1) {\r\n          rowArr.push(rowStr); // 完成一行\r\n        }\r\n      }\r\n      let line = rowArr.length > totalLine ? totalLine : rowArr.length;\r\n      for (let i = 0; i < line; i++) {\r\n        // console.log(rowArr[i], i, line);\r\n        if (i + 1 === line && line !== 1) {\r\n          rowArr[i] = rowArr[i] + \"...\";\r\n        }\r\n        this._ctx.fillText(rowArr[i], startX, startY + i * lineHeight);\r\n      }\r\n      resolve(rowArr.length);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @description 绘制图片\r\n   * @param {ImageConfig} params\r\n   * @returns\r\n   */\r\n  public async drawImage(params: DrawProps): Promise<void> {\r\n    return new Promise(() => {\r\n      if (params.borderRadius !== undefined) {\r\n        this.creatBorderRect(\r\n          Math.floor(params.x * this._ratio),\r\n          Math.floor(params.y * this._ratio),\r\n          Math.floor((params.source as HTMLImageElement).width * this._ratio),\r\n          Math.floor((params.source as HTMLImageElement).height * this._ratio),\r\n          Math.floor(params.borderRadius * this._ratio),\r\n        );\r\n        // this.restore()\r\n      }\r\n      // console.log('drawImage: params', params);\r\n\r\n      if (\r\n        params.dx == undefined ||\r\n        params.dy == undefined ||\r\n        params.dWidth == undefined ||\r\n        params.dHeight == undefined\r\n      ) {\r\n        // console.log(params);\r\n\r\n        this._ctx.drawImage(\r\n          params.source as HTMLImageElement,\r\n          Math.floor(params.x * this._ratio),\r\n          Math.floor(params.y * this._ratio),\r\n          Math.floor((params.source as HTMLImageElement).width * this._ratio),\r\n          Math.floor((params.source as HTMLImageElement).height * this._ratio),\r\n        );\r\n      } else {\r\n        this._ctx.drawImage(\r\n          params.source as HTMLImageElement,\r\n          params.dx * this._ratio,\r\n          params.dy * this._ratio,\r\n          params.dWidth * this._ratio,\r\n          params.dHeight * this._ratio,\r\n          params.x * this._ratio,\r\n          params.y * this._ratio,\r\n          (params.source as HTMLImageElement).width * this._ratio,\r\n          (params.source as HTMLImageElement).height * this._ratio,\r\n        );\r\n      }\r\n      this.restore();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @description 创建图片\r\n   * @param {string} url\r\n   * @returns {Promise<HTMLImageElement|unknown>}\r\n   */\r\n  public createImage(src: string): Promise<HTMLImageElement | unknown> {\r\n    console.log(src);\r\n    if (!Image) {\r\n      console.log(\"不支持new Image(),传入CanvasImageSource\");\r\n      return;\r\n    }\r\n    let img = new Image();\r\n    img.src = src;\r\n    img.referrerPolicy = \"no-referrer\";\r\n    let imgPo = new Promise((resolve, reject) => {\r\n      img.onload = function () {\r\n        resolve(img);\r\n      };\r\n      img.onerror = function (e) {\r\n        reject(e);\r\n      };\r\n    });\r\n    return imgPo;\r\n  }\r\n\r\n  /**\r\n   * @description 创建圆角矩形\r\n   * @param {number} x x坐标\r\n   * @param {number} y y坐标\r\n   * @param {number} width 宽度\r\n   * @param {number} height 高度\r\n   * @param {number} radius 圆角半径\r\n   * @returns\r\n   */\r\n  public creatBorderRect(\r\n    x: number,\r\n    y: number,\r\n    w: any,\r\n    h: any,\r\n    r: number,\r\n    color?: string | CanvasGradient | CanvasPattern,\r\n  ) {\r\n    [x, y, w, h, r] = [x * this._ratio, y * this._ratio, w * this._ratio, h * this._ratio, r * this._ratio];\r\n    this._ctx.beginPath();\r\n    // 左上角\r\n    this._ctx.arc(x + r, y + r, r, Math.PI, 1.5 * Math.PI);\r\n    this._ctx.moveTo(x + r, y);\r\n    this._ctx.lineTo(x + w - r, y);\r\n    this._ctx.lineTo(x + w, y + r);\r\n    // 右上角\r\n    this._ctx.arc(x + w - r, y + r, r, 1.5 * Math.PI, 2 * Math.PI);\r\n    this._ctx.lineTo(x + w, y + h - r);\r\n    this._ctx.lineTo(x + w - r, y + h);\r\n    // 右下角\r\n    this._ctx.arc(x + w - r, y + h - r, r, 0, 0.5 * Math.PI);\r\n    this._ctx.lineTo(x + r, y + h);\r\n    this._ctx.lineTo(x, y + h - r);\r\n    // 左下角\r\n    this._ctx.arc(x + r, y + h - r, r, 0.5 * Math.PI, Math.PI);\r\n    this._ctx.lineTo(x, y + r);\r\n    this._ctx.lineTo(x + r, y);\r\n\r\n    this._ctx.fillStyle = color || \"#5a5a5a\";\r\n    this._ctx.fill();\r\n    this._ctx.closePath();\r\n    this._ctx.save();\r\n    this._ctx.clip();\r\n  }\r\n\r\n  /**\r\n   * @description 恢复clip区域限制\r\n   * @returns\r\n   */\r\n  public restore() {\r\n    this._ctx.restore();\r\n  }\r\n  /**\r\n   *\r\n   * @param type 图片类型\r\n   * @param quality 图片质量(0-1)\r\n   * @returns String\r\n   */\r\n  public canvas2Image() {\r\n    let canvasImg = this._canvas.toDataURL(\"image/png\", 1);\r\n    return canvasImg;\r\n  }\r\n\r\n  /**\r\n   * @description 获取canvas\r\n   * @returns {HTMLCanvasElement}\r\n   */\r\n  public getCanvas(): HTMLCanvasElement {\r\n    return this._canvas;\r\n  }\r\n  /**\r\n   * @description 获取canvas的上下文\r\n   * @returns {RenderingContext}\r\n   */\r\n  public getCtx(): RenderingContext {\r\n    return this._ctx;\r\n  }\r\n\r\n  /* public setRatio(resW: number, deviceW: number) {\r\n    this._ratio = deviceW / resW;\r\n  } */\r\n}\r\nexport default CanvasPoster;\r\n"],"names":[],"mappings":"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"}